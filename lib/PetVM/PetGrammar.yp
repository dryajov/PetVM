%{
use PetVM qw(%opcodes);
use PetVM::PetLexer;
use Data::Dumper;
%}

%%

program: # empty
        | program expr
        | error { $_[0]->YYErrok }
;

expr:       OP                  {
                                    push @{$_[0]->{YYDATA}->{opcodes}}, 
                                    [$opcodes{$_[0]->_get_opcode_from_keyword($_[1])}];
                                    
                                    return $_[1];
                                }
            |OP_PUSH arg_num    {
                                    push @{$_[0]->{YYDATA}->{opcodes}}, 
                                    [$opcodes{$_[0]->_get_opcode_from_keyword($_[1])}, [$_[2]]];
                                    
                                    return ($_[1], $_[2]);
                                }
            |OP_PUSH arg_string {
                                    push @{$_[0]->{YYDATA}->{opcodes}}, 
                                    [$opcodes{$_[0]->_get_opcode_from_keyword($_[1])}, ["$_[2]"]];
                                    
                                    return ($_[1], $_[2]);
                                }
            |OP_JMP LABEL_REF   {
                                    # verify that there is a valid jump point
                                    exists $_[0]->{YYDATA}->{labels}->{$_[2]} or do {
                                        $_[0]->YYData->{ERRMSG} = "Invalid jump point!\n";
                                        $_[0]->YYError;
                                        return undef;
                                    };
                                    
                                    # get the jump point
                                    my $jmp_pt = $_[0]->{YYDATA}->{labels}->{$_[2]};
                                    
                                    # push it on the opcodes stack
                                    push @{$_[0]->{YYDATA}->{opcodes}}, [$opcodes{'OP_PUSH'}, [$jmp_pt]];
                                    
                                    # then we push the jump instruction on the stack as well
                                    push @{$_[0]->{YYDATA}->{opcodes}}, [$opcodes{$_[0]->_get_opcode_from_keyword($_[1])}];
                                    
                                    return ($_[1], $_[2]);
                                }
            |LABEL              {
                                    # make the label point one position beyond 
                                    # in the instruction array last instruction.
                                    # we need this because the next instruction 
                                    # is going to be the jump to location
                                    $_[0]->{YYDATA}->{labels}->{$_[1]} = $#{$_[0]->{YYDATA}->{opcodes}}+1;
                                    
                                    return ($_[1]);                            
                                }

;

# argument number definition
arg_num:    NUMBER
;

# argument string definition
arg_string: STRING
;
  
%%

# convert a keyword to a valid opcode number
sub _get_opcode_from_keyword {
    my $self    = shift;
    my $keyword = shift;
    
    return "OP_$keyword";
}

sub _error {

    exists $_[0]->YYData->{ERRMSG}
    and do {
        print $_[0]->YYData->{ERRMSG}, "\n";
        return $_[0]->YYData->{ERRMSG};
    };
        
    die "Syntax error.\n";
}

sub _lexer {
    my ($self) = @_;
    
    my ($label, $value) = $self->{YYDATA}->{lexer}->token;
    
    return ($label, $value);
}

# init the parser
# expects a valid file handle
sub _init {
    my $self = shift;

    # create the lexer
    my $lexer = new PetVM::PetLexer;
    $lexer->from(@_);
    $self->{YYDATA}->{lexer} = $lexer;
    
    $self->{YYDATA}->{opcodes}  = []; # opcodes array
    $self->{YYDATA}->{labels}   = {}; # labels hash - holds references to opcodes    
    
    return;
}

# parses PetVM assembly language
sub parse {
    my $self = shift;
    my $file = shift;
    
    $self->_init($file);
    
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error, yydebug => 0x0 );
    
    return;
}

# returns an array ref of opcodes
sub get_opcodes {
    my $self = shift;
    
    return $self->{YYDATA}->{opcodes};
}

__END__

=head1 NAME

B<PetVM> parser definition.

=head1 SYNOPSIS

 use PetVM::PetParser;

 my $parser = PetVM::PetParser->new;
 
 $parser->parse( IO::Scalar->new( \$buf ) );
 
 my $instructions = $parser->get_opcodes();

=head1 DESCRIPTION

This is the Parse::Yapp based parser module for B<PetVM>. For the grammar definition please refer to PetGrammar.yp.

=head1 METHODS

=head2 new

my $parser = PetVM::PetParser->new;

The C<new> method creates a new B<PetVM::PetParser> object.

=head2 parse

$parser->parse( IO::Scalar->new( \$buf ) );

The C<parse> method parses B<PetVM> assembly code. It expects a valid file handle as a parameter.

=head2 get_opcodes

$parser->get_opcodes;

The C<get_opcodes> returns an array ref of valid opcodes that B<PetVM> understands.

=head1 AUTHOR

Dmitriy Ryajov, <dryajov@gmail.com> 

=cut

